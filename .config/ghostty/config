# Config syntax crash course
# ==========================
# # The config file consists of simple key-value pairs,
# # separated by equals signs.
# font-family = Iosevka
# window-padding-x = 2
#
# # Spacing around the equals sign does not matter.
# # All of these are identical:
# key=value
# key= value
# key =value
# key = value
#
# # Any line beginning with a # is a comment. It's not possible to put
# # a comment after a config option, since it would be interpreted as a
# # part of the value. For example, this will have a value of "#123abc":
# background = #123abc
#
# # Empty values are used to reset config keys to default.
# key =
#
# # Some config options have unique syntaxes for their value,
# # which is explained in the docs for that config option.
# # Just for example:
# resize-overlay-duration = 4s 200ms

theme = Dracula
# theme = Brogrammer
# theme = Wez
# font-family = "ComicShannsMono Nerd Font Mono"
font-family = "ComicShannsMono Nerd Font"
font-size = 16

# Some shaders can be found in this repo, they're usually uploaded to discord
# https://github.com/hackrmomo/ghostty-shaders
# custom-shader = shaders/custom.glsl
# custom-shader = shaders/animated-gradient-shader.glsl
# custom-shader = shaders/bettercrt.glsl
# custom-shader = shaders/bloom.glsl
# custom-shader = shaders/bloom1.glsl
# custom-shader = shaders/bloom075.glsl
# custom-shader = shaders/bloom060.glsl
custom-shader = shaders/bloom050.glsl
# custom-shader = shaders/bloom025.glsl
# custom-shader = shaders/bloom050.glsl
# custom-shader = shaders/bloom060.glsl
# custom-shader = shaders/bloom075.glsl
# custom-shader = shaders/bloom1.glsl
# custom-shader = shaders/crt.glsl
# custom-shader = shaders/cubes.glsl
# custom-shader = shaders/dither.glsl
# custom-shader = shaders/drunkard.glsl
# custom-shader = shaders/fireworks-rockets.glsl
# custom-shader = shaders/fireworks.glsl
# custom-shader = shaders/gears-and-belts.glsl
# custom-shader = shaders/glitchy.glsl
# custom-shader = shaders/glow-rgbsplit-twitchy.glsl
# custom-shader = shaders/gradient-background.glsl
# custom-shader = shaders/inside-the-matrix.glsl
# custom-shader = shaders/just-snow.glsl
# custom-shader = shaders/matrix-hallway.glsl
# custom-shader = shaders/negative.glsl
# custom-shader = shaders/retro-terminal.glsl
# custom-shader = shaders/smoke-and-ghost.glsl
# custom-shader = shaders/sparks-from-fire.glsl
# custom-shader = shaders/spotlight.glsl
# custom-shader = shaders/starfield-colors.glsl
# custom-shader = shaders/starfield.glsl
# custom-shader = shaders/tft.glsl
# custom-shader = shaders/underwater.glsl
# custom-shader = shaders/water.glsl

# Valid values:
# 
#   * `true`
#   * `false` - windows won't have native decorations, i.e. titlebar and
#      borders. On macOS this also disables tabs and tab overview.
# 
# The "toggle_window_decoration" keybind action can be used to create
# a keybinding to toggle this setting at runtime.
# 
# Changing this configuration in your configuration and reloading will
# only affect new windows. Existing windows will not be affected.
# 
# macOS: To hide the titlebar without removing the native window borders
#        or rounded corners, use `macos-titlebar-style = hidden` instead.
macos-titlebar-style = hidden

# Confirms that a surface should be closed before closing it. This defaults to
# true. If set to false, surfaces will close without any confirmation.
confirm-close-surface = false

# Toggle the "quick" terminal. The quick terminal is a terminal that
# appears on demand from a keybinding, often sliding in from a screen
# edge such as the top. This is useful for quick access to a terminal
# without having to open a new window or tab.
#
# When the quick terminal loses focus, it disappears. The terminal state
# is preserved between appearances, so you can always press the keybinding
# to bring it back up.
#
# The quick terminal has some limitations:
#
#   - It is a singleton; only one instance can exist at a time.
#   - It does not support tabs.
#   - It will not be restored when the application is restarted
#     (for systems that support window restoration).
#   - It supports fullscreen, but fullscreen will always be a non-native
#     fullscreen (macos-non-native-fullscreen = true). This only applies
#     to the quick terminal window. This is a requirement due to how
#     the quick rerminal is rendered.
#
# See the various configurations for the quick terminal in the
# configuration file to customize its behavior.
#
# `global:` - Make the keybind global. By default, keybinds only work
#  within Ghostty and under the right conditions (application focused,
#  sometimes terminal focused, etc.). If you want a keybind to work
#  globally across your system (i.e. even when Ghostty is not focused),
#  specify this prefix. This prefix implies `all:`. Note: this does not
#  work in all environments; see the additional notes below for more
#  information.
# keybind = global:cmd+s=toggle_quick_terminal
keybind = cmd+s=toggle_quick_terminal

# If `true`, the *Option* key will be treated as *Alt*. This makes terminal
# sequences expecting *Alt* to work properly, but will break Unicode input
# sequences on macOS if you use them via the *Alt* key. You may set this to
# `false` to restore the macOS *Alt* key unicode sequences but this will break
# terminal sequences expecting *Alt* to work.
# 
# The values `left` or `right` enable this for the left or right *Option*
# key, respectively.
# 
# Note that if an *Option*-sequence doesn't produce a printable character, it
# will be treated as *Alt* regardless of this setting. (i.e. `alt+ctrl+a`).
# 
# This does not work with GLFW builds.
macos-option-as-alt = left

# Duration (in seconds) of the quick terminal enter and exit animation.
# Set it to 0 to disable animation completely. This can be changed at
# runtime.
# quick-terminal-animation-duration = 0.1
quick-terminal-animation-duration = 0.08
# quick-terminal-animation-duration = 0

keybind = super+i=inspector:toggle
keybind = super+r=reload_config

# This doesn't work when in tmux, if outside tmux the regular ctrl+l works
# keybind = super+k=clear_screen

# Customize the macOS app icon.
# 
# This only affects the icon that appears in the dock, application
# switcher, etc. This does not affect the icon in Finder because
# that is controlled by a hardcoded value in the signed application
# bundle and can't be changed at runtime. For more details on what
# exactly is affected, see the `NSApplication.icon` Apple documentation;
# that is the API that is being used to set the icon.
# 
# WARNING: The `custom-style` option is _experimental_. We may change
# the format of the custom styles in the future. We're still finalizing
# the exact layers and customization options that will be available.
# 
# Other caveats:
# 
#   * The icon in the update dialog will always be the official icon.
#     This is because the update dialog is managed through a
#     separate framework and cannot be customized without significant
#     effort.
# 
# Valid values:
# 
#  * `official` - Use the official Ghostty icon.
#  * `blueprint`, `chalkboard`, `microchip`, `glass`, `holographic`,
#    `paper`, `retro`, `xray` - Official variants of the Ghostty icon
#    hand-created by artists (no AI).
#  * `custom-style` - Use the official Ghostty icon but with custom
#    styles applied to various layers. The custom styles must be
#    specified using the additional `macos-icon`-prefixed configurations.
#    The `macos-icon-ghost-color` and `macos-icon-screen-color`
#    configurations are required for this style.
# 
macos-icon = xray
